{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gamecontrol Setup Development To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip install -r requirements.txt PYTHONPATH To get nicer imports and automatic documentation add the src folder to your PYTHONPATH export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\" Documentation The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function","title":"Setup"},{"location":"#gamecontrol-setup","text":"","title":"Gamecontrol Setup"},{"location":"#development","text":"To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip install -r requirements.txt","title":"Development"},{"location":"#pythonpath","text":"To get nicer imports and automatic documentation add the src folder to your PYTHONPATH export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\"","title":"PYTHONPATH"},{"location":"#documentation","text":"The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function","title":"Documentation"},{"location":"sdk/","text":"Game SDK for Gamecontrol Structure classDiagram class Game{ +dict config -Players players -bool is_running -GameIO game_io +GameIO game_io +set_game_state(GameState: state) +on_init() +on_pregame() +on_start() +on_end() +on_score() -game_io_sub(dict: mqtt_conf) -ready() -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +subscribe() +publish(str topic, dict payload) +set_game_state(GameState state) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState class Players { -dict ready -dict score +dict ready +dict score +__init__(list seats) +set_ready(int seat, bool ready) +set_score(int seat, int score) +reset_ready() +reset() } Game ..> Players","title":"Structure"},{"location":"sdk/#game-sdk-for-gamecontrol","text":"","title":"Game SDK for Gamecontrol"},{"location":"sdk/#structure","text":"classDiagram class Game{ +dict config -Players players -bool is_running -GameIO game_io +GameIO game_io +set_game_state(GameState: state) +on_init() +on_pregame() +on_start() +on_end() +on_score() -game_io_sub(dict: mqtt_conf) -ready() -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +subscribe() +publish(str topic, dict payload) +set_game_state(GameState state) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState class Players { -dict ready -dict score +dict ready +dict score +__init__(list seats) +set_ready(int seat, bool ready) +set_score(int seat, int score) +reset_ready() +reset() } Game ..> Players","title":"Structure"},{"location":"sdk/config-file/","text":"Config File To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Gamecontrol/config.toml Structure Example seats = [ 1 , 2 , 3 ] list[int] seats : List of controller id's","title":"Config File"},{"location":"sdk/config-file/#config-file","text":"To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Gamecontrol/config.toml","title":"Config File"},{"location":"sdk/config-file/#structure","text":"Example seats = [ 1 , 2 , 3 ] list[int] seats : List of controller id's","title":"Structure"},{"location":"sdk/code-references/game/","text":"Game Class to control the whole game. Inherit from this class and call run() to start your gamecontrol game_io property readonly Instance of GameIO used to control the whole game loop players property readonly Instance of Player used to acces player information on_end ( self ) Executed, when the game ends Source code in gamecontrol_sdk/game.py async def on_end ( self ): \"\"\" Executed, when the game ends \"\"\" self . _players . reset () logging . info ( \"ON END\" ) on_exit ( self , err = None ) Executed, when the game loop is exited Parameters: Name Type Description Default err Exception Value of the exception when the game exited with none zero code None Source code in gamecontrol_sdk/game.py async def on_exit ( self , err : Exception = None ): \"\"\" Executed, when the game loop is exited Arguments: err: Value of the exception when the game exited with none zero code \"\"\" logging . info ( \"ON EXIT\" ) if err : logging . error ( err ) on_init ( self ) Executed, when the game is startet with Game.run() Source code in gamecontrol_sdk/game.py async def on_init ( self ): \"\"\" Executed, when the game is startet with `Game.run()` \"\"\" logging . info ( \"ON INIT\" ) on_pregame ( self ) Executed, before a new game starts Source code in gamecontrol_sdk/game.py async def on_pregame ( self ): \"\"\" Executed, before a new game starts \"\"\" logging . info ( \"ON PREGAME\" ) on_score ( self ) Executed, when a player scores one or more points Source code in gamecontrol_sdk/game.py async def on_score ( self ): \"\"\" Executed, when a player scores one or more points \"\"\" on_start ( self ) Executed, when a new game starts Source code in gamecontrol_sdk/game.py async def on_start ( self ): \"\"\" Executed, when a new game starts \"\"\" logging . info ( \"ON START\" ) run ( self , conf_path = '/home/pi/Gamecontrol/config.toml' , log_level = 0 ) Start the game engine Parameters: Name Type Description Default conf_path str Path to configuration.toml '/home/pi/Gamecontrol/config.toml' log_level LogLevel logging level 0 Source code in gamecontrol_sdk/game.py def run ( self , conf_path : str = '/home/pi/Gamecontrol/config.toml' , log_level : LogLevel = 0 ): \"\"\" Start the game engine Arguments: conf_path: Path to configuration.toml log_level: logging level \"\"\" logging . getLogger () . setLevel ( log_level ) asyncio . run ( self . _run ( conf_path )) set_game_state ( self , state ) Set game_state and execute the coresponding function Parameters: Name Type Description Default state GameState State to wich to switch required Source code in gamecontrol_sdk/game.py async def set_game_state ( self , state : GameState ): \"\"\" Set `game_state` and execute the coresponding function Arguments: state: State to wich to switch \"\"\" self . _game_state = state state_func : Coroutine if self . _game_state == GameState . START : state_func = self . on_pregame () if self . _game_state == GameState . RUN : state_func = self . on_start () if self . _game_state == GameState . END : state_func = self . on_end () await asyncio . gather ( state_func , self . _game_io . set_game_state ( self . _game_state ) )","title":"Game"},{"location":"sdk/code-references/game/#game","text":"Class to control the whole game. Inherit from this class and call run() to start your gamecontrol","title":"Game"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.game_io","text":"Instance of GameIO used to control the whole game loop","title":"game_io"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.players","text":"Instance of Player used to acces player information","title":"players"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_end","text":"Executed, when the game ends Source code in gamecontrol_sdk/game.py async def on_end ( self ): \"\"\" Executed, when the game ends \"\"\" self . _players . reset () logging . info ( \"ON END\" )","title":"on_end()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_exit","text":"Executed, when the game loop is exited Parameters: Name Type Description Default err Exception Value of the exception when the game exited with none zero code None Source code in gamecontrol_sdk/game.py async def on_exit ( self , err : Exception = None ): \"\"\" Executed, when the game loop is exited Arguments: err: Value of the exception when the game exited with none zero code \"\"\" logging . info ( \"ON EXIT\" ) if err : logging . error ( err )","title":"on_exit()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_init","text":"Executed, when the game is startet with Game.run() Source code in gamecontrol_sdk/game.py async def on_init ( self ): \"\"\" Executed, when the game is startet with `Game.run()` \"\"\" logging . info ( \"ON INIT\" )","title":"on_init()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_pregame","text":"Executed, before a new game starts Source code in gamecontrol_sdk/game.py async def on_pregame ( self ): \"\"\" Executed, before a new game starts \"\"\" logging . info ( \"ON PREGAME\" )","title":"on_pregame()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_score","text":"Executed, when a player scores one or more points Source code in gamecontrol_sdk/game.py async def on_score ( self ): \"\"\" Executed, when a player scores one or more points \"\"\"","title":"on_score()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.on_start","text":"Executed, when a new game starts Source code in gamecontrol_sdk/game.py async def on_start ( self ): \"\"\" Executed, when a new game starts \"\"\" logging . info ( \"ON START\" )","title":"on_start()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.run","text":"Start the game engine Parameters: Name Type Description Default conf_path str Path to configuration.toml '/home/pi/Gamecontrol/config.toml' log_level LogLevel logging level 0 Source code in gamecontrol_sdk/game.py def run ( self , conf_path : str = '/home/pi/Gamecontrol/config.toml' , log_level : LogLevel = 0 ): \"\"\" Start the game engine Arguments: conf_path: Path to configuration.toml log_level: logging level \"\"\" logging . getLogger () . setLevel ( log_level ) asyncio . run ( self . _run ( conf_path ))","title":"run()"},{"location":"sdk/code-references/game/#gamecontrol_sdk.game.Game.set_game_state","text":"Set game_state and execute the coresponding function Parameters: Name Type Description Default state GameState State to wich to switch required Source code in gamecontrol_sdk/game.py async def set_game_state ( self , state : GameState ): \"\"\" Set `game_state` and execute the coresponding function Arguments: state: State to wich to switch \"\"\" self . _game_state = state state_func : Coroutine if self . _game_state == GameState . START : state_func = self . on_pregame () if self . _game_state == GameState . RUN : state_func = self . on_start () if self . _game_state == GameState . END : state_func = self . on_end () await asyncio . gather ( state_func , self . _game_io . set_game_state ( self . _game_state ) )","title":"set_game_state()"},{"location":"sdk/code-references/game_io/","text":"GameIO Core of the game-sdk. Used to communicate with other controllers and the gamecontrol. client : Client class-attribute MQTT Client __init__ ( self , mqtt_conf ) special Parameters: Name Type Description Default mqtt_conf dict Information needed to connect controller to the mqtt broker required Source code in gamecontrol_sdk/game_io.py def __init__ ( self , mqtt_conf : dict ): \"\"\" Arguments: mqtt_conf: Information needed to connect controller to the mqtt broker \"\"\" self . _ip = mqtt_conf [ 'broker_ip' ] self . _port = mqtt_conf [ 'broker_port' ] if 'broker_port' in mqtt_conf else 1883 self . _uname = mqtt_conf [ 'username' ] if 'username' in mqtt_conf else None self . _passwd = mqtt_conf [ 'password' ] if 'password' in mqtt_conf else None self . client = Client ( self . _ip , self . _port , username = self . _uname , password = self . _passwd ) publish ( self , topic , payload ) Publish any message to any desired topic Source code in gamecontrol_sdk/game_io.py async def publish ( self , topic : str , payload : dict ): \"\"\" Publish any message to any desired topic \"\"\" try : await self . client . publish ( topic , json . dumps ( payload )) except TypeError : logging . error ( \"MQTT Payload is not JSON serializable\" ) set_game_state ( self , state ) Publish new game_state Parameters: Name Type Description Default state GameState State to publish required Source code in gamecontrol_sdk/game_io.py async def set_game_state ( self , state : GameState ): \"\"\" Publish new `game_state` Arguments: state: State to publish \"\"\" payload = dict ( mode = state . value ) await self . publish ( \"status/game\" , payload ) subscribe ( self ) Subscribe to the gamestatus published by the gamecontrol Source code in gamecontrol_sdk/game_io.py async def subscribe ( self ): \"\"\" Subscribe to the gamestatus published by the gamecontrol \"\"\" await self . client . connect () topics = [( \"status/ready\" , 0 ), ( \"score\" , 0 )] async with self . client . unfiltered_messages () as messages : await self . client . subscribe ( topics ) async for msg in messages : msg : MQTTMessage = msg data = json . loads ( msg . payload ) yield ( msg . topic , data )","title":"GameIO"},{"location":"sdk/code-references/game_io/#gameio","text":"Core of the game-sdk. Used to communicate with other controllers and the gamecontrol.","title":"GameIO"},{"location":"sdk/code-references/game_io/#gamecontrol_sdk.game_io.GameIO.client","text":"MQTT Client","title":"client"},{"location":"sdk/code-references/game_io/#gamecontrol_sdk.game_io.GameIO.__init__","text":"Parameters: Name Type Description Default mqtt_conf dict Information needed to connect controller to the mqtt broker required Source code in gamecontrol_sdk/game_io.py def __init__ ( self , mqtt_conf : dict ): \"\"\" Arguments: mqtt_conf: Information needed to connect controller to the mqtt broker \"\"\" self . _ip = mqtt_conf [ 'broker_ip' ] self . _port = mqtt_conf [ 'broker_port' ] if 'broker_port' in mqtt_conf else 1883 self . _uname = mqtt_conf [ 'username' ] if 'username' in mqtt_conf else None self . _passwd = mqtt_conf [ 'password' ] if 'password' in mqtt_conf else None self . client = Client ( self . _ip , self . _port , username = self . _uname , password = self . _passwd )","title":"__init__()"},{"location":"sdk/code-references/game_io/#gamecontrol_sdk.game_io.GameIO.publish","text":"Publish any message to any desired topic Source code in gamecontrol_sdk/game_io.py async def publish ( self , topic : str , payload : dict ): \"\"\" Publish any message to any desired topic \"\"\" try : await self . client . publish ( topic , json . dumps ( payload )) except TypeError : logging . error ( \"MQTT Payload is not JSON serializable\" )","title":"publish()"},{"location":"sdk/code-references/game_io/#gamecontrol_sdk.game_io.GameIO.set_game_state","text":"Publish new game_state Parameters: Name Type Description Default state GameState State to publish required Source code in gamecontrol_sdk/game_io.py async def set_game_state ( self , state : GameState ): \"\"\" Publish new `game_state` Arguments: state: State to publish \"\"\" payload = dict ( mode = state . value ) await self . publish ( \"status/game\" , payload )","title":"set_game_state()"},{"location":"sdk/code-references/game_io/#gamecontrol_sdk.game_io.GameIO.subscribe","text":"Subscribe to the gamestatus published by the gamecontrol Source code in gamecontrol_sdk/game_io.py async def subscribe ( self ): \"\"\" Subscribe to the gamestatus published by the gamecontrol \"\"\" await self . client . connect () topics = [( \"status/ready\" , 0 ), ( \"score\" , 0 )] async with self . client . unfiltered_messages () as messages : await self . client . subscribe ( topics ) async for msg in messages : msg : MQTTMessage = msg data = json . loads ( msg . payload ) yield ( msg . topic , data )","title":"subscribe()"},{"location":"sdk/code-references/players/","text":"Players Class to manage playerdata ready property readonly Ready state of all players (readonly) score property readonly Scores of all player (readonly) __init__ ( self , seats ) special Parameters: Name Type Description Default seats list List of Player Id's required Source code in gamecontrol_sdk/players.py def __init__ ( self , seats : list ): \"\"\" Arguments: seats: List of Player Id's \"\"\" for seat in seats : self . _ready [ seat ] = False self . _score [ seat ] = 0 reset ( self ) Reset ready state and score of all players to Fales e.q. 0 Source code in gamecontrol_sdk/players.py def reset ( self ): \"\"\" Reset ready state and score of all players to `Fales` e.q. `0` \"\"\" for key in self . _ready . keys (): self . _ready [ key ] = False self . _score [ key ] = 0 reset_ready ( self ) Reset ready state of all players to False Source code in gamecontrol_sdk/players.py def reset_ready ( self ): \"\"\" Reset ready state of all players to `False` \"\"\" for key in self . _ready . keys (): self . _ready [ key ] = False set_ready ( self , seat , ready ) Set ready state for specific player Parameters: Name Type Description Default seat int Player Id required ready bool Ready state required Source code in gamecontrol_sdk/players.py def set_ready ( self , seat : int , ready : bool ): \"\"\" Set ready state for specific player Arguments: seat: Player Id ready: Ready state \"\"\" self . _ready [ seat ] = ready set_score ( self , seat , score ) Set score of specific player Parameters: Name Type Description Default seat int Player ID required score int Value of the score required Source code in gamecontrol_sdk/players.py def set_score ( self , seat : int , score : int ): \"\"\" Set score of specific player Arguments: seat: Player ID score: Value of the score \"\"\" self . _score [ seat ] = score","title":"Players"},{"location":"sdk/code-references/players/#players","text":"Class to manage playerdata","title":"Players"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.ready","text":"Ready state of all players (readonly)","title":"ready"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.score","text":"Scores of all player (readonly)","title":"score"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.__init__","text":"Parameters: Name Type Description Default seats list List of Player Id's required Source code in gamecontrol_sdk/players.py def __init__ ( self , seats : list ): \"\"\" Arguments: seats: List of Player Id's \"\"\" for seat in seats : self . _ready [ seat ] = False self . _score [ seat ] = 0","title":"__init__()"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.reset","text":"Reset ready state and score of all players to Fales e.q. 0 Source code in gamecontrol_sdk/players.py def reset ( self ): \"\"\" Reset ready state and score of all players to `Fales` e.q. `0` \"\"\" for key in self . _ready . keys (): self . _ready [ key ] = False self . _score [ key ] = 0","title":"reset()"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.reset_ready","text":"Reset ready state of all players to False Source code in gamecontrol_sdk/players.py def reset_ready ( self ): \"\"\" Reset ready state of all players to `False` \"\"\" for key in self . _ready . keys (): self . _ready [ key ] = False","title":"reset_ready()"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.set_ready","text":"Set ready state for specific player Parameters: Name Type Description Default seat int Player Id required ready bool Ready state required Source code in gamecontrol_sdk/players.py def set_ready ( self , seat : int , ready : bool ): \"\"\" Set ready state for specific player Arguments: seat: Player Id ready: Ready state \"\"\" self . _ready [ seat ] = ready","title":"set_ready()"},{"location":"sdk/code-references/players/#gamecontrol_sdk.players.Players.set_score","text":"Set score of specific player Parameters: Name Type Description Default seat int Player ID required score int Value of the score required Source code in gamecontrol_sdk/players.py def set_score ( self , seat : int , score : int ): \"\"\" Set score of specific player Arguments: seat: Player ID score: Value of the score \"\"\" self . _score [ seat ] = score","title":"set_score()"}]}